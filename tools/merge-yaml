#!/usr/bin/env python3

import yaml

import sys

if len(sys.argv) < 2:
    print("usage: merge-yaml base [overlay, overlay, overlay, ...]")
    sys.exit(1)

args = sys.argv[1:]

base = yaml.safe_load(open(args[0]))
print("base: ", base)


def merge(a, b, path="$"):
    if a is None:
        return b
    if b is None:
        return a

    if type(a) == dict:
        if type(b) != dict:
            print(f"Error! Types don't match at {path}")
            print(f"  {type(a)} != {type(b)}")
            sys.exit(1)

        _merged = {}
        for k,v in a.items():
            if k in b:
                _merged[k] = merge(v, b[k], path=f"$.{k}")
            else:
                _merged[k] = v
        for k,v in b.items():
            if k not in _merged:
                _merged[k] = v

        return _merged

    if type(a) == list:
        if type(b) != list:
            print(f"Error! Types don't match at {path}")
            print(f"  {type(a)} != {type(b)}")
            sys.exit(1)

        return [*a, *b]

    # Unknown type, override, prefer b
    return b

                
merged = base
for f in args[1:]:
    _overlay = yaml.safe_load(open(f))
    merged = merge(merged, _overlay)

print(yaml.dump(merged))
